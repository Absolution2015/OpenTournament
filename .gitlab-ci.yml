variables:
  GIT_STRATEGY: none
  GIT_CHECKOUT: "false"
  BRANCH_DEVELOPMENT: 'development-placeholder'
  BRANCH_TESTING: 'testing'
  BRANCH_STAGING: 'staging'
  BRANCH_PRODUCTION: 'production'
  SCRIPT: '"$CI_PROJECT_DIR\.gitlab-ci.bat" "C:\UE\Engine\" "$CI_PROJECT_DIR\"'

stages:
  - merge
  - assemble
  - validate
  - build
  - cook
  - stage
  - inject
  - upload

# TO-DO
#
# validate
#   structure
#   source
#   content
# build
#   compile
#     config #1
#     config #2
#     etc.
#   cook
#     config #1
#     config #2
#     etc.
# stage
#   move
#     config #1
#     config #2
#     etc.
#   inject
#     config #1
#     config #2
#     etc.
# upload
#   config #1
#   config #2
#   etc.

# --------------------------------------------------
#     Merge
# --------------------------------------------------

merge:
  stage: merge
  script:
    - git checkout $BRANCH_TESTING
    - git pull
    - git pull origin $BRANCH_DEVELOPMENT
    - git push
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"
  variables:
    GIT_STRATEGY: fetch
    GIT_CHECKOUT: "true"

# --------------------------------------------------
#     Assemble
# --------------------------------------------------

assemble:
  stage: assemble
  script: [ call %SCRIPT% Assemble ]
  variables:
    GIT_STRATEGY: fetch
    GIT_CHECKOUT: "true"

# --------------------------------------------------
#     Validate
# --------------------------------------------------

# This stage will make sure the project's structure, source and content are without obvious warnings and errors.

# --------------------------------------------------
#     Build
# --------------------------------------------------

build_client_development_win64:
  stage: build
  script: [ call %SCRIPT% Build Client Development Win64 ]
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"

build_client_shipping_win64:
  stage: build
  script: [ call %SCRIPT% Build Client Shipping Win64 ]
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"

# --------------------------------------------------
#     Cook
# --------------------------------------------------

cook_client_development_win64:
  stage: cook
  script: [ call %SCRIPT% Cook Client Development Win64 ]
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"

cook_client_shipping_win64:
  stage: cook
  script: [ call %SCRIPT% Cook Client Shipping Win64 ]
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"

# --------------------------------------------------
#     Stage
# --------------------------------------------------

stage_client_development_win64:
  stage: stage
  script: [ call %SCRIPT% Stage Client Development Win64 ]
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"

stage_client_shipping_win64:
  stage: stage
  script: [ call %SCRIPT% Stage Client Shipping Win64 ]
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"

# --------------------------------------------------
#     Inject
# --------------------------------------------------

# This stage will inject all the required dependencies and utilites inside the staged build.
# Examples: MSVC runtime distributables, curl etc.

# --------------------------------------------------
#     Upload
# --------------------------------------------------

upload_client_development_win64:
  stage: upload
  script: [ echo "GL has a stupid requirement to add an empty script"]
  artifacts:
    paths: [ '$CI_PROJECT_DIR\Output\Staged' ]
    expire_in: 1 week
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"

upload_client_shipping_win64:
  stage: upload
  script: [ echo "GL has a stupid requirement to add an empty script"]
  artifacts:
    paths: [ '$CI_PROJECT_DIR\Output\Staged' ]
    expire_in: 1 week
  only:
    variables:
      - $CI_COMMIT_REF_NAME == $BRANCH_TESTING
      - $CI_PIPELINE_SOURCE == "schedule"
      